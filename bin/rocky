#!/usr/bin/env node

const fs      = require('fs')
const toml    = require('toml')
const assign  = require('object-assign')
const findup  = require('findup-sync')
const version = require('rocky').VERSION

const configFile = 'rocky.toml'

const argv = require('yargs')
  .usage('Start rocky HTTP proxy server\nUsage: $0 [options]')
  .example('$0 -c rocky.toml \\\n -f http://127.0.0.1:9000 \\\n -r http://127.0.0.1', '')
  .help('help')
  .alias('help', 'h')
  .version(version)
  .alias('v', 'version')
  .options({
    config: {
      alias: 'c',
      description: 'File path to TOML config file'
    },
    port: {
      alias: 'p',
      description: 'rocky HTTP server port',
    },
    forward: {
      alias: 'f',
      description: 'Default forward server URL'
    },
    replay: {
      alias: 'r',
      description: 'Define a replay server URL'
    },
    route: {
      alias: 't',
      description: 'Define one or multiple routes, separated by commas'
    },
    key: {
      alias: 'k',
      description: 'Path to SSL key file'
    },
    cert: {
      alias: 'e',
      description: 'Path to SSL certificate file'
    },
    ca: {
      alias: 'a',
      description: 'CA certificate file'
    },
    secure: {
      alias: 's',
      description: 'Enable SSL certification validation',
      type: 'boolean'
    },
    balance: {
      alias: 'b',
      description: 'Define server URLs to balance between, separated by commas',
    },
    mute: {
      alias: 'm',
      description: 'Disable HTTP traffic log in stdout',
      type: 'boolean'
    },
    debug: {
      alias: 'd',
      description: 'Enable debug mode',
      type: 'boolean'
    }
  })
  .argv

var data = ''
var id = setTimeout(start, 250)

process.stdin.resume()
process.stdin.setEncoding('utf8')
process.stdin.on('data', function (chunk) {
  data += chunk
})
process.stdin.once('end', function () {
  clearTimeout(id)
  start()
})

function start() {
  process.stdin.pause()

  var config = readConfig(data)
  var opts = assign({}, argv, config)
  if (process.exitCode) return

  startProxy(opts)
}

function startProxy(opts) {
  if (opts.cert && opts.key) {
    opts.ssl = {
      cert: fs.readFileSync(opts.cert),
      key: fs.readFileSync(opts.key)
    }
    if (opts.ca) {
      opts.ssl.ca = fs.readFileSync(opts.ca)
    }
  }

  if (opts.debug) {
    process.env.DEBUG = '*'
  }

  opts.port = +opts.port || process.env.PORT ||Â 3000

  require('../lib/setup')(opts)
  console.log('rocky server listening on port:', opts.port)
}

function readConfig() {
  if (argv.route && argv.forward) {
    return readArgsConfig()
  } else {
    return readTomlConfig(data)
  }
}

function readArgsConfig() {
  var config = {}
  var paths = argv.route.split(',')

  paths
  .filter(function (path) {
    return path.trim()
  })
  .forEach(function (path) {
    config[path] = {
      method: 'all',
      forward: argv.forward,
      replay: argv.replay
    }
  })

  return config
}

function readTomlConfig(data) {
  if (!data && process.env.ROCKY_CONFIG) {
    argv.config = process.env.ROCKY_CONFIG
  }

  if (!data && argv.config && !fs.existsSync(argv.config)) {
    console.error('Invalid config path:', argv.config)
    process.exitCode = 1
    return
  }

  if (!data && !argv.config) {
    argv.config = findup(configFile, { cwd: process.cwd() })
  }

  if (!data && argv.config) {
    data = fs.readFileSync(argv.config).toString()
  }

  if (!data) {
    console.error('Cannot find rocky.toml config file')
    process.exitCode = 1
    return
  }

  return toml.parse(data)
}
